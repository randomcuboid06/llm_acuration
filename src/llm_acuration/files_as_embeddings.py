# -*- coding: utf-8 -*-
"""Files as embeddings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ttmd1COVSjipZUx8oHFL1y-l2X16zaG
"""

!pip install chromadb

!pip install sentence_transformers

import chromadb
import csv

def store_Function(text_files, csv_files):
    """
    This function demonstrates how to interact with ChromaDB by creating a collection,
    uploading text and CSV files as embeddings, and querying the collection.

    Args:
    text_files (list): List of text file paths.
    csv_files (list): List of CSV file paths.
    """
    # Step 1: Get the Chroma Client
    chroma_client = chromadb.Client()

    # Step 2: Create a collection
    collection = chroma_client.create_collection(name="my_collections")

    # Step 3: Upload text files as embeddings
    for file_path in text_files:
        with open(file_path, 'r') as file:
            text_content = file.read()

        # Upload text content as embedding
        collection.add(
            documents=[text_content],  # Provide text content of the document
            metadatas=[{"source": "local_file"}],  # Add metadata for the document
            ids=[file_path]  # Provide the file path as the ID for the document
        )

    # Step 4: Upload CSV files as embeddings
    for file_path in csv_files:
        with open(file_path, 'r') as file:
            csv_reader = csv.reader(file)
            csv_data = list(csv_reader)

        # Convert CSV data to text content
        text_content = '\n'.join(','.join(row) for row in csv_data)

        # Upload text content as embedding
        collection.add(
            documents=[text_content],  # Provide text content of the document
            metadatas=[{"source": "local_file"}],  # Add metadata for the document
            ids=[file_path]  # Provide the file path as the ID for the document
        )

    # Step 5: Query the collection (optional)
    results = collection.query(
        query_texts=["This is a query document"],
        n_results=2
    )

    # Print query results
    for result in results:
        print("Document:", result)

# Example usage:
if __name__ == "__main__":
    text_files = ["file1.txt", "file2.txt"]
    csv_files = ["data1.csv", "data2.csv"]
    store_Function(text_files, csv_files)
